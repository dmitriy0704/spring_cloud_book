version: '3.7'

services:
  keycloak_demo:
    image: quay.io/keycloak/keycloak:18.0.0
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres_keycloak_demo
      KC_DB_URL_DATABASE: keycloak
      KC_DB_PASSWORD: password
      KC_DB_USERNAME: keycloak
      KC_DB_SCHEMA: public
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8890:8080"
    depends_on:
      postgres_keycloak_demo:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "keycloak"
  postgres_keycloak_demo:
    image: postgres:latest
    container_name: postgres_keycloak
    volumes:
      - pgdata:/var/lib/postgresql
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    healthcheck:
      test: "exit 0"
    ports:
      - "5436:5432"
    networks:
      backend:
        aliases:
          - "postgres_keycloak_demo"

  database:
    image: postgres:latest
    container_name: database
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "ostock_dev"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      backend:
        aliases:
          - "zookeeper"
  kafkaserver:
    image: wurstmeister/kafka:latest
    container_name: kafkaserver
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"
  redisserever:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      backend:
        aliases:
          - "redis"


#  pgadmin:
#    container_name: pgadmin_container
#    image: dpage/pgadmin4
#    environment:
#      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
#      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
#      PGADMIN_CONFIG_SERVER_MODE: 'False'
#    volumes:
#      - pgadmin:/var/lib/pgadmin
#
#    ports:
#      - "${PGADMIN_PORT:-5050}:80"
#    networks:
#      - backend
#    restart: unless-stopped
#
#  configserver:
#    build: ../configserver
#    image: configserver-image
#    container_name: configserver
#    ports:
#      - '8071:8071'
#    networks:
#      backend:
#        aliases:
#          - "configserver"
#  eurekaserver:
#    build: ../eurekaserver
#    image: eurekaserver-image
#    ports:
#      - "8761:8761"
#    depends_on:
#      database:
#        condition: service_healthy
#      configserver:
#        condition: service_started
#    networks:
#      backend:
#        aliases:
#          - "eurekaserver"
#  licensingservice:
#    build: ../licensing-service
#    image: licensing-service-image
#    container_name: licenseservice
#    environment:
#      - SPRING_PROFILES_ACTIVE=dev
#      - CONFIGSERVER_URI=http://configserver:8071
#      - CONFIGSERVER_PORT=8071
#      - DATABASESERVER_PORT=5432
#    depends_on:
#      database:
#        condition: service_healthy
#      configserver:
#        condition: service_healthy
#    ports:
#      - '8180:8080'
#    networks:
#      backend:
#        aliases:
#          - "licenseservice"
#  organizationservice:
#    build: ../organization-service
#    image: organization-service-image
#    container_name: organizationservice
#    environment:
#      - SPRING_PROFILES_ACTIVE=dev
#      - CONFIGSERVER_URI=http://configserver:8071
#      - CONFIGSERVER_PORT=8071
#      - DATABASESERVER_PORT=5432
#    depends_on:
#      database:
#        condition: service_healthy
#      configserver:
#        condition: service_healthy
#    ports:
#      - '8081:8081'
#    networks:
#      backend:
#        aliases:
#          - "organizationservice"

networks:
  backend:
    driver: bridge

volumes:
  pgdata:
  postgres:
#  pgadmin:
#  vault: